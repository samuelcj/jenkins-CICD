Jenkins is one of the major DevOps tools that helps us with build automation including in making our CI-CD process seamless.
It helps us run test, build artifacts, publish artifacts, deploy artifacts,send notifications and many other workflows we do.

1. INSTALLING JENKINS:
OPTION 1: We can install jenkins directly on a dedicated server eg Amazon EC2. After which we create the jenkins user on the server.
OPTION 2: We run jenkins as a docker container. This is faster and easier.

2. Launch an EC2 instance that would be used to deploy the Jenkins docker image. Remember to open the port 8080 (for Jenkins server)
- ssh into the instance: ssh -i <key-pair> ec2-user@<public IP>

3. run the jenkins container command: docker run -p 8080:8080 -p 50000:50000 -d -v jenkins_data:/var/jenkins_home jenkins/jenkins:lts
where:
- -p 8080:8080  => for accessing jenkins UI
- -p 50000:50000  => Where Jenkins worker and master node communicate and run
- -v jenkins_data:/var/jenkins_home  => creating docker named volume for data persistency 

4. Access inside the container to obtain the jenkins ui password from: /var/jenkins_home/secrets/initialAdminPassword

# docker exec -it <container ID> /bin/sh

5. After login, install all jenkins plugins and create my first admin user.


JENKINS JOBS
1. Automating Java Maven App workflow i.e to run test and build the jar file for the app.
For this, we need maven (mvn) to be available.
#This was done using Method 1: Installing the maven package from the Jenkins UI system configuration.

2. Automating NodeJS App workflow i.e to run test, package and push to repository.
For this, we need npm to be available
# This was done using the Method 2: Installing the NodeJS and NPM packages using the command line.
    We would do this by going into the container as a root user:
    # docker exec -u 0 -it <container ID> bash      => to login to container as root.
    # cat /etc/issue                                => to know our container environment type in order to use the proper codes.
    # apt update                                    => mine is a debian environment
    # apt install curl                              => to install curl if it doesn't already exist.
    # curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh     => to download the script for installing node and npm.
    # bash nodesource_setup.sh                      => to execute the script.
    # nodejs -v  and npm -v                         => to vonfirm their installation.
3. If you want a plugin like nodejs that does not exist to appear, you go to plugins and check the available lists and install it.
    It will now appear as a tool and you can then add it to your plugin list to be used in jobs.

CONFIGURE GIT REPOSITORY
# To add a git repository, just configure the job and add a git repo with proper credentials.
# The builds for the jobs are found the the jobs directory of the /var/jenkins_home folder.
# The checkeout git repo is then found in the jobs directory of the workspace folder in the /var/jenkins_home of the container 
# Then we can invoke actions or build from the git repo by configuring it on the jenkins ui.
    - Remember to specify the proper path and also the right permission for the Jenkins user.

RUN TEST AND BUILD JAVA MAVEN APPLICATION
In this case, we configure the jenkins to run test and build our java maven application, after it checksout our git repo.
    - So create the job and properly configure it to use the maven plugin in our configuration for test and build.
    - For this case where the java maven app scr and pom files are not in the main directory, I had to set it in the advanced option to capture the POM file directory.

DOCKER IN JENKINS
To have docker commands available in Jenkins. The common way is to attach a volume to jenkins from the host file. using the commands below:
docker run -p 8080:8080 -p 50000:50000 -d \
> -v jenkins_data:/var/jenkins_home \                          # to persist existing jenkins data
> -v /var/run/docker.sock:/var/run/docker.sock \                # to mount docker volume
> -v $(which docker):/usr/bin/docker jenkins/jenkins:lts         # to enable docker runtime and restart the container jenkins:lts

NB: The docker commands might not have permissiom to run some jenkins command. hence we need to add permission to it by logging in as a root user:
# docker exec -u 0 -it <container ID> bash                  # login as root
# chmod 666 /var/run/docker.sock                            # read and write permission for the docker volume for everyone (including jenkins user)

Now we can execute docker commands in any of our builds in jenkins.

 

BUILD DOCKER IMAGE
Now to build our java maven app as a docker image, we create a docker file that will help run that from our jenkins.

1. Add a new build session in your jenkins job configuration to run shell script.
2. Add this shell command:
    docker build -t <image name>:<image version> ./<path to your docker file>
    # eg:  docker build -t java-maven-app:1.0 ./java-maven-app/

AWESOMEEEEE... THIS WORKS. ON TO THE NEXT STEP !!!!


PUSH IMAGE TO DOCKER HUB
1. Create a DockeHub account (this gives one private repository for free)
2. Create a repository or use an existing repository
3. Configure credentials in Jenkins
4. Configure the Build Job to push image to the Docker hub repository
NB: To push an image to a dockerhub repository, is for us to tag the image with the repository name.
Hence, the shell command configured in jenkins would be like this:

docker build -t <dockerhub repository name>:<image verion tag>
docker push <dockerhub repository name>:<image verion tag>

for example: 
docker build -t samuelcj310/java-maven-app:java-maven-app_1.0              #NB: the samuel is my username and java-maven-app here is my repo name for this image.
docker push samuelcj310/java-maven-app:java-maven-app_1.0

## We also need to activate the Docker Hub login credentials, to enable the push. And we do this using the "USe Secret text or file" utility in Jenkins.
This allows us bind our credentials to the jenkins build session. Use Separated credentials and specify them.

So the command we need to have in the execute shell session becomes:

docker build -t samuelcj310/java-maven-app:java-maven-app_1.0 ./java-maven-app/         # ./java/maven-app/ is the location of my Dockerfile from my cloneed github repo.
docker login -u $USERNAME -p $PASSWORD              # No need to specify the repository, since DockerHup is the default repository 
docker push samuelcj310/java-maven-app:java-maven-app_1.0

NB: The above works but it is not secure as the password is captured unencrypted. But we can pass it as a standard input using:

docker build -t samuelcj310/java-maven-app:java-maven-app_2.0 ./java-maven-app/
echo $PASSWORD | docker login -u $USERNAME --password-stdin             # To pass in our password as a standard input for better security. 
docker push samuelcj310/java-maven-app:java-maven-app_2.0

THIS WORKS WELL !!!!


PUSH IMAGE TO EXTERNAL REPOSITORY (eg Nexus, Amazon ECR, etc)

We would still configue the right credentials for the repository, then modify our shell command to look like this. 

FOR NEXUS:
docker build -t <repository name>:<image name or tag> <docker file direcory>
echo $PASSWORD | docker login -u $USERNAME --password-stdin  <repository host or url>    
docker push <repository name>:<image name or tag>

FOR EXAMPLE:
docker build -t 172.22.159.46:8083/app-repo:java-maven-app_2.0 ./java-maven-app/
echo $PASSWORD | docker login -u $USERNAME --password-stdin 172.22.159.46:8083
docker push 172.22.159.46:8083/app-repo:java-maven-app_2.0

THIS WORKS WELL !!!!